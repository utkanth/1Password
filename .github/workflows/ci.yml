name: CI with 1Password Secrets Automation for Interview

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger for demo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y unzip curl jq

      - name: Install 1Password CLI (direct download)
        run: |
          curl -sSL https://cache.agilebits.com/dist/1P/op2/pkg/v2.30.3/op_linux_amd64_v2.30.3.zip -o op.zip
          unzip -q op.zip
          sudo mv op /usr/local/bin/
          op --version

      - name: Sign in, fetch, create, update, and delete secrets
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          echo "üîê Authenticating using OP_SERVICE_ACCOUNT_TOKEN..."
          
          ITEM_TO_UPDATE="API_KEY"
          VAULT="1password PoC"
          DEPLOY_TOKEN_ITEM="DEPLOY_TOKEN"
          TEMP_ITEM_TO_KEEP="CI_TEMP_LOGIN"

          # ----------------------------------------------------------------------
          # --- 1. READ/FETCH SECRETS ---
          # ----------------------------------------------------------------------
          echo "üìñ Reading from Vault..."
          
          API_KEY_CURRENT_VALUE=$(op read "op://${VAULT}/${ITEM_TO_UPDATE}/username")
          DEPLOY_TOKEN_VALUE=$(op read "op://${VAULT}/${DEPLOY_TOKEN_ITEM}/username")

          # ----------------------------------------------------------------------
          # --- 2. CREATE NEW SECRET ---
          # ----------------------------------------------------------------------
          echo "‚úçÔ∏è Writing into Vault..."
          
          NEW_PASSWORD="ci_secret_$(date +%s)"
          op item create --vault "${VAULT}" - << EOF
          {
            "title": "${TEMP_ITEM_TO_KEEP}",
            "category": "LOGIN",
            "fields": [
              {"id": "username", "value": "ci_runner_user"},
              {"id": "password", "value": "${NEW_PASSWORD}"}
            ]
          }
          EOF
          
          # ----------------------------------------------------------------------
          # --- 3. UPDATE EXISTING SECRET ---
          # ----------------------------------------------------------------------
          echo "üîÑ Updating in Vault..."
          
          TODAYS_DATE=$(date +%Y-%m-%d)
          BASE_API_KEY_VALUE=$(echo "$API_KEY_CURRENT_VALUE" | sed 's/_[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$//')
          NEW_API_KEY_VALUE="${BASE_API_KEY_VALUE}_${TODAYS_DATE}"

          CURRENT_JSON=$(op item get "${ITEM_TO_UPDATE}" --vault "${VAULT}" --format json)
          UPDATED_JSON=$(echo "${CURRENT_JSON}" | jq \
            --arg new_val "$NEW_API_KEY_VALUE" \
            '.fields |= map(if .id == "username" then .value = $new_val else . end)')

          echo "${UPDATED_JSON}" | op item edit "${ITEM_TO_UPDATE}" --vault "${VAULT}" -
            
          # ----------------------------------------------------------------------
          # --- 4. DELETE EXISTING SECRET ---
          # ----------------------------------------------------------------------
          echo "üî• Deleting from Vault..."
          
          yes | op item delete "${DEPLOY_TOKEN_ITEM}" --vault "${VAULT}"

      - name: Manual trigger confirmation
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "üßë‚Äçüíª Workflow triggered manually via the 'Run workflow' button."
