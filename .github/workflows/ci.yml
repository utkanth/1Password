name: CI with 1Password Secrets Automation for Interview

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger for demo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y unzip curl

      - name: Install 1Password CLI (direct download)
        run: |
          echo "üîß Downloading and installing 1Password CLI..."
          curl -sSL https://cache.agilebits.com/dist/1P/op2/pkg/v2.30.3/op_linux_amd64_v2.30.3.zip -o op.zip
          unzip -q op.zip
          sudo mv op /usr/local/bin/
          op --version
          echo "‚úÖ 1Password CLI installed successfully."

      - name: Sign in, fetch and write secrets to 1Password (same session)
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          set -e  # Exit on any error for better debugging
          echo "üîê Signing in with 1Password service account..."
          
          # Verify token is set
          if [ -z "$OP_SERVICE_ACCOUNT_TOKEN" ]; then
            echo "‚ùå Error: OP_SERVICE_ACCOUNT_TOKEN is not set."
            exit 1
          fi
          echo "‚úÖ OP_SERVICE_ACCOUNT_TOKEN is set (value obfuscated)."

          # Sign in using the service account token explicitly
          SESSION_TOKEN=$(op signin --account service-account --token "$OP_SERVICE_ACCOUNT_TOKEN" --raw)
          if [ $? -ne 0 ]; then
            echo "‚ùå Error: Failed to sign in with 1Password service account."
            exit 1
          fi
          export OP_SESSION_service_account="$SESSION_TOKEN"
          
          echo "‚úÖ Signed in successfully."

          echo "üîê Fetching secrets..."
          API_KEY=$(op read "op://1password PoC/API_KEY/username" 2> read_error.log)
          if [ $? -ne 0 ]; then
            echo "‚ùå Error fetching API_KEY: $(cat read_error.log)"
            exit 1
          fi
          DEPLOY_TOKEN=$(op read "op://1password PoC/DEPLOY_TOKEN/username" 2> read_error.log)
          if [ $? -ne 0 ]; then
            echo "‚ùå Error fetching DEPLOY_TOKEN: $(cat read_error.log)"
            exit 1
          fi
          echo "API_KEY: $API_KEY"
          echo "DEPLOY_TOKEN: $DEPLOY_TOKEN"
          echo "‚úÖ Secrets fetched successfully."

          # Write the fetched secrets back to 1Password
          echo "üîê Writing secrets back to 1Password..."

          # Create a new API_KEY item (if it doesn't exist) - using HJSON template
          if ! op item list --vault "1password PoC" --title "NEW_API_KEY" >/dev/null 2>&1; then
            echo "üìù Creating new item 'NEW_API_KEY'..."
            op item create \
              --vault "1password PoC" \
              --category Login \
              --tags "demo,ci" \
              --template '{
                title: "NEW_API_KEY",
                sections: [{ name: "General" }],
                fields: [
                  { id: "username", value: "demo_user" },
                  { id: "password", value: "new_api_key_value_here_$(date +%s)" }
                ]
              }' < /dev/null 2> create_error.log
            if [ $? -ne 0 ]; then
              echo "‚ùå Error creating item 'NEW_API_KEY': $(cat create_error.log)"
              exit 1
            fi
            echo "‚úÖ Item 'NEW_API_KEY' created successfully."
          else
            echo "‚ÑπÔ∏è Item 'NEW_API_KEY' already exists, skipping creation."
          fi

          # Edit the existing API_KEY item (only if it exists) and update the username field
          if op item list --vault "1password PoC" --title "API_KEY" >/dev/null 2>&1; then
            echo "‚úèÔ∏è Editing existing item 'API_KEY'..."
            op item edit \
              --vault "1password PoC" \
              "API_KEY" \
              --template '{
                fields: [
                  { id: "username", value: "API_KEY_edited_123_$(date +%s)" }
                ]
              }' < /dev/null 2> edit_error.log
            if [ $? -ne 0 ]; then
              echo "‚ùå Error editing item 'API_KEY': $(cat edit_error.log)"
              exit 1
            fi
            echo "‚úÖ Item 'API_KEY' updated successfully."
          else
            echo "‚ö†Ô∏è Item 'API_KEY' not found, skipping edit."
          fi

          echo "‚úÖ Secrets written and updated successfully."

      - name: Manual trigger confirmation
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "üßë‚Äçüíª Workflow triggered manually via the 'Run workflow' button."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
