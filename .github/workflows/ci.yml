name: CI with 1Password Secrets Automation for Interview

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger for demo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y unzip curl

      - name: Install 1Password CLI (direct download)
        run: |
          echo "üîß Downloading and installing 1Password CLI..."
          curl -sSL https://cache.agilebits.com/dist/1P/op2/pkg/v2.30.3/op_linux_amd64_v2.30.3.zip -o op.zip
          unzip -q op.zip
          sudo mv op /usr/local/bin/
          op --version
          echo "‚úÖ 1Password CLI installed successfully."

      - name: Sign in, fetch, create, and edit secrets with Service Account
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          echo "üîê Authenticating using OP_SERVICE_ACCOUNT_TOKEN..."
          
          # --- READ/FETCH SECRETS (Working) ---
          echo "üîê Fetching secrets..."
          API_KEY=$(op read "op://1password PoC/API_KEY/username")
          DEPLOY_TOKEN=$(op read "op://1password PoC/DEPLOY_TOKEN/username")
          echo "‚úÖ Secrets fetched successfully."
          
          # --- 1. WRITE/CREATE NEW SECRET (Robust JSON Pipe Method - SUCCESSFUL) ---
          NEW_PASSWORD="ci_secret_$(date +%s)"
          echo "‚ú® Creating a new 'CI_TEMP_LOGIN' item using JSON pipe..."
          op item create --vault "1password PoC" - << EOF
          {
            "title": "CI_TEMP_LOGIN",
            "category": "LOGIN",
            "fields": [
              {"id": "username", "value": "ci_runner_user"},
              {"id": "password", "value": "${NEW_PASSWORD}"}
            ]
          }
          EOF
          echo "‚úÖ New secret 'CI_TEMP_LOGIN' created successfully."
          
          # ----------------------------------------------------------------------
          # --- 2. EDIT/UPDATE EXISTING SECRET (Robust JSON Pipe Method) ---
          # ----------------------------------------------------------------------
          echo "‚úèÔ∏è Updating the 'CI_TEMP_LOGIN' item using JSON pipe..."

          # a) Fetch the current item's JSON
          ITEM_UUID="CI_TEMP_LOGIN"
          VAULT="1password PoC"
          CURRENT_JSON=$(op item get "${ITEM_UUID}" --vault "${VAULT}" --format json)
          
          # b) Use jq to update the fields in the JSON structure
          #    We update the username field and add a new tag
          UPDATED_USERNAME="ci_runner_user_updated_$(date +%s)"
          
          UPDATED_JSON=$(echo "${CURRENT_JSON}" | jq \
            --arg new_user "$UPDATED_USERNAME" \
            '.fields |= map(if .id == "username" then .value = $new_user else . end) | .tags += ["ci-updated", "demo"]')

          # c) Pipe the modified JSON back to the edit command
          echo "${UPDATED_JSON}" | op item edit "${ITEM_UUID}" --vault "${VAULT}" -
            
          echo "‚úÖ Secret 'CI_TEMP_LOGIN' updated successfully."

      - name: Manual trigger confirmation
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "üßë‚Äçüíª Workflow triggered manually via the 'Run workflow' button."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
