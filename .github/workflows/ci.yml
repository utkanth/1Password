name: CI with 1Password Secrets Automation for Interview

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger for demo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y unzip curl

      - name: Install 1Password CLI (direct download)
        run: |
          echo "üîß Downloading and installing 1Password CLI..."
          curl -sSL https://cache.agilebits.com/dist/1P/op2/pkg/v2.30.3/op_linux_amd64_v2.30.3.zip -o op.zip
          unzip -q op.zip
          sudo mv op /usr/local/bin/
          op --version
          echo "‚úÖ 1Password CLI installed successfully."

      - name: Sign in, fetch, create, and update existing API_KEY with today's date
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          echo "üîê Authenticating using OP_SERVICE_ACCOUNT_TOKEN..."
          
          # Define item names and vault name
          ITEM_TO_UPDATE="API_KEY"
          VAULT="1password PoC"

          # --- 1. READ/FETCH SECRETS (Initial Read) ---
          echo "üîê Fetching initial secrets..."
          # The API_KEY item's 'username' field holds the key value
          API_KEY_CURRENT_VALUE=$(op read "op://${VAULT}/${ITEM_TO_UPDATE}/username")
          echo "API_KEY initial value: ${API_KEY_CURRENT_VALUE:0:4}..." 
          echo "‚úÖ Initial secrets fetched successfully."
          
          # --- 2. CREATE NEW SECRET (For Demo Consistency) ---
          NEW_PASSWORD="ci_secret_$(date +%s)"
          echo "‚ú® Creating a temporary 'CI_TEMP_LOGIN' item (Successful test)..."
          
          # Use heredoc for op item create
          op item create --vault "${VAULT}" - << EOF
          {
            "title": "CI_TEMP_LOGIN",
            "category": "LOGIN",
            "fields": [
              {"id": "username", "value": "ci_runner_user"},
              {"id": "password", "value": "${NEW_PASSWORD}"}
            ]
          }
          EOF
          echo "‚úÖ New secret 'CI_TEMP_LOGIN' created successfully."
          
          # ----------------------------------------------------------------------
          # --- 3. ROTATE/UPDATE EXISTING API_KEY (JSON Method with Expiry Fix) ---
          # ----------------------------------------------------------------------
          TODAYS_DATE=$(date +%Y-%m-%d)
          
          # Logic to strip any previous date suffix before appending the new date.
          BASE_API_KEY_VALUE=$(echo "$API_KEY_CURRENT_VALUE" | sed 's/_[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}$//')
          NEW_API_KEY_VALUE="${BASE_API_KEY_VALUE}_${TODAYS_DATE}"
          
          echo "‚úèÔ∏è Updating the '${ITEM_TO_UPDATE}' to append date: ${TODAYS_DATE}..."

          # a) Fetch the current item's JSON
          CURRENT_JSON=$(op item get "${ITEM_TO_UPDATE}" --vault "${VAULT}" --format json)
          
          # b) Use jq to update ONLY the 'username' field's value. 
          #    The 'else .' passes all other fields (including date fields) unmodified.
          UPDATED_JSON=$(echo "${CURRENT_JSON}" | jq \
            --arg new_val "$NEW_API_KEY_VALUE" \
            '.fields |= map(
              if .id == "username" then 
                .value = $new_val 
              else 
                . 
              end
            )')

          # c) Pipe the modified JSON back to the edit command
          echo "${UPDATED_JSON}" | op item edit "${ITEM_TO_UPDATE}" --vault "${VAULT}" -
            
          echo "‚úÖ Secret '${ITEM_TO_UPDATE}' rotated and updated successfully."

      - name: Manual trigger confirmation
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "üßë‚Äçüíª Workflow triggered manually via the 'Run workflow' button."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
